


ARM Macro Assembler    Page 1 


    1 00000000         ; ******************************************************
                       ************************
    2 00000000         ; * <h2><center>&copy; COPYRIGHT 2012 Embest Tech. Co., 
                       Ltd.</center></h2>
    3 00000000         ; * @file    cpu_a.asm
    4 00000000         ; * @author  CMP Team
    5 00000000         ; * @version V1.0.0
    6 00000000         ; * @date    28-February-2013
    7 00000000         ; * @brief   cpu configuration and port layer file.     
                                          
    8 00000000         ; ******************************************************
                       ************************
    9 00000000         ; * @attention
   10 00000000         ; *
   11 00000000         ; * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS
                        AT PROVIDING CUSTOMERS
   12 00000000         ; * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN 
                       ORDER FOR THEM TO SAVE
   13 00000000         ; * TIME. AS A RESULT, Embest SHALL NOT BE HELD LIABLE F
                       OR ANY DIRECT, INDIRECT
   14 00000000         ; * OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS 
                       ARISING FROM THE CONTENT
   15 00000000         ; * OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF
                        THE CODING INFORMATION
   16 00000000         ; * CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
   17 00000000         ; ******************************************************
                       ************************
   18 00000000         
   19 00000000         ;Exported functions ------------------------------------
                       ------------------------
   20 00000000         
   21 00000000                 EXPORT           CPU_IntDis
   22 00000000                 EXPORT           CPU_IntEn
   23 00000000         
   24 00000000                 EXPORT           CPU_SR_Save
   25 00000000                 EXPORT           CPU_SR_Restore
   26 00000000         
   27 00000000                 EXPORT           CPU_CntLeadZeros
   28 00000000                 EXPORT           CPU_RevBits
   29 00000000         
   30 00000000                 EXPORT           CPU_WaitForInt
   31 00000000                 EXPORT           CPU_WaitForExcept
   32 00000000         
   33 00000000         
   34 00000000         ;code generation directives-----------------------------
                       ------------------------
   35 00000000         
   36 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   37 00000000                 THUMB
   38 00000000                 REQUIRE8
   39 00000000                 PRESERVE8
   40 00000000         
   41 00000000         
   42 00000000         ;$PAGE
   43 00000000         ;*******************************************************
                       ************************
   44 00000000         ;                                    DISABLE and ENABLE 
                       INTERRUPTS



ARM Macro Assembler    Page 2 


   45 00000000         ;
   46 00000000         ; Description : Disable/Enable interrupts.
   47 00000000         ;
   48 00000000         ; Prototypes  : void  CPU_IntDis(void);
   49 00000000         ;               void  CPU_IntEn (void);
   50 00000000         ;*******************************************************
                       ************************
   51 00000000         CPU_IntDis
   52 00000000 B672            CPSID            I
   53 00000002 4770            BX               LR
   54 00000004         
   55 00000004         
   56 00000004         CPU_IntEn
   57 00000004 B662            CPSIE            I
   58 00000006 4770            BX               LR
   59 00000008         
   60 00000008         
   61 00000008         ;*******************************************************
                       ************************
   62 00000008         ;                           CRITICAL SECTION FUNCTIONS
   63 00000008         ;
   64 00000008         ; Description : Disable/Enable interrupts by preserving 
                       the state of interrupts. 
   65 00000008         ;               Generally speaking, the state of the int
                       errupt disable flag is 
   66 00000008         ;               stored in the local variable 'cpu_sr' & 
                       interrupts are then disabled 
   67 00000008         ;               ('cpu_sr' is allocated in all functions 
                       that need to disable interrupts).
   68 00000008         ;               The previous interrupt state is restored
                        by copying 'cpu_sr' into 
   69 00000008         ;               the CPU's status register.
   70 00000008         ;
   71 00000008         ; Prototypes  : CPU_SR  CPU_SR_Save   (void);
   72 00000008         ;               void    CPU_SR_Restore(CPU_SR cpu_sr);
   73 00000008         ;
   74 00000008         ;
   75 00000008         ; Note(s)     : (1) These functions are used in general 
                       like this:
   76 00000008         ;
   77 00000008         ;                   void  Task (void *p_arg)
   78 00000008         ;                   {
   79 00000008         ;                                                       
                               /* Allocate storage for CPU status register */
   80 00000008         ;                   #if (CPU_CFG_CRITICAL_METHOD == CPU_
                       CRITICAL_METHOD_STATUS_LOCAL)
   81 00000008         ;                       CPU_SR  cpu_sr;
   82 00000008         ;                   #endif
   83 00000008         ;
   84 00000008         ;                            :
   85 00000008         ;                            :
   86 00000008         ;                       CPU_CRITICAL_ENTER();           
                               /* cpu_sr = CPU_SR_Save();                  */
   87 00000008         ;                            :
   88 00000008         ;                            :
   89 00000008         ;                       CPU_CRITICAL_EXIT();            
                               /* CPU_SR_Restore(cpu_sr);                  */
   90 00000008         ;                            :
   91 00000008         ;                            :



ARM Macro Assembler    Page 3 


   92 00000008         ;                   }
   93 00000008         ;*******************************************************
                       ************************
   94 00000008         
   95 00000008         CPU_SR_Save
   96 00000008 F3EF 8010       MRS              R0, PRIMASK ; Set prio int mask
                                                             to mask all (excep
                                                            t faults)
   97 0000000C B672            CPSID            I
   98 0000000E 4770            BX               LR
   99 00000010         
  100 00000010         
  101 00000010         CPU_SR_Restore                       ; See Note #2.
  102 00000010 F380 8810       MSR              PRIMASK, R0
  103 00000014 4770            BX               LR
  104 00000016         
  105 00000016         
  106 00000016         ;$PAGE
  107 00000016         ;*******************************************************
                       ************************
  108 00000016         ;                               COUNT LEADING ZEROS
  109 00000016         ;
  110 00000016         ; Description : Counts the number of binary zero bits be
                       fore the first binary one bit
  111 00000016         ;               in the argument. If the argument is zero
                       , the value 32 is returned.
  112 00000016         ;
  113 00000016         ; Prototypes : CPU_INT32U  CPU_CntLeadZeros (CPU_INT32U 
                        val)
  114 00000016         ;
  115 00000016         ; Argument(s) : val     variable to count leading zeros
  116 00000016         ;*******************************************************
                       ************************
  117 00000016         
  118 00000016         CPU_CntLeadZeros
  119 00000016 FAB0 F080       CLZ              R0, R0      ; Count leading zer
                                                            os
  120 0000001A 4770            BX               LR
  121 0000001C         
  122 0000001C         
  123 0000001C         ;*******************************************************
                       ************************
  124 0000001C         ;                                   REVERSE BITS
  125 0000001C         ;
  126 0000001C         ; Description : Reverses the bits in the argument.
  127 0000001C         ;
  128 0000001C         ; Prototypes : CPU_INT32U  CPU_RevBits (CPU_INT32U  val)
                       
  129 0000001C         ;
  130 0000001C         ; Argument(s) : val     variable to reverse
  131 0000001C         ;*******************************************************
                       ************************
  132 0000001C         
  133 0000001C         CPU_RevBits
  134 0000001C FA90 F0A0       RBIT             R0, R0      ; Reverse bits
  135 00000020 4770            BX               LR
  136 00000022         
  137 00000022         
  138 00000022         ;$PAGE



ARM Macro Assembler    Page 4 


  139 00000022         ;*******************************************************
                       ************************
  140 00000022         ;                                 WAIT FOR INTERRUPT
  141 00000022         ;
  142 00000022         ; Description : Enters sleep state, which will be exited
                        when an interrupt is received.
  143 00000022         ;
  144 00000022         ; Prototypes  : void  CPU_WaitForInt (void)
  145 00000022         ;
  146 00000022         ; Argument(s) : none.
  147 00000022         ;*******************************************************
                       ************************
  148 00000022         
  149 00000022         CPU_WaitForInt
  150 00000022 BF30            WFI                          ; Wait for interrup
                                                            t
  151 00000024 4770            BX               LR
  152 00000026         
  153 00000026         
  154 00000026         ;*******************************************************
                       ************************
  155 00000026         ;                                WAIT FOR EXCEPTION
  156 00000026         ;
  157 00000026         ; Description : Enters sleep state, which will be exited
                        when an exception is received.
  158 00000026         ;
  159 00000026         ; Prototypes  : void  CPU_WaitForExcept (void)
  160 00000026         ;
  161 00000026         ; Argument(s) : none.
  162 00000026         ;*******************************************************
                       ************************
  163 00000026         
  164 00000026         CPU_WaitForExcept
  165 00000026 BF20            WFE                          ; Wait for exceptio
                                                            n
  166 00000028 4770            BX               LR
  167 0000002A         
  168 0000002A         
  169 0000002A         ;$PAGE
  170 0000002A         ;*******************************************************
                       ************************
  171 0000002A         ;                             CPU ASSEMBLY PORT FILE END
                       
  172 0000002A         ;*******************************************************
                       ************************
  173 0000002A         
  174 0000002A                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\flash\cpu_a.d -o.\flash\cpu_a.o -I.\RTE\_Actor13 -I"E:\Pro Softw
are\Keil_v5\ARM\PACK\ARM\CMSIS\5.4.0\CMSIS\Core\Include" -I"E:\Pro Software\Kei
l_v5\ARM\PACK\Keil\LPC1800_DFP\2.9.0\Device\Include" --predefine="__MICROLIB SE
TA 1" --predefine="__UVISION_VERSION SETA 527" --predefine="_RTE_ SETA 1" --pre
define="LPC18xx SETA 1" --predefine="NO_CRP SETA 1" --list=.\flash\cpu_a.lst ..
\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 36 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      None
Comment: .text unused
CPU_CntLeadZeros 00000016

Symbol: CPU_CntLeadZeros
   Definitions
      At line 118 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 27 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_CntLeadZeros used once
CPU_IntDis 00000000

Symbol: CPU_IntDis
   Definitions
      At line 51 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 21 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_IntDis used once
CPU_IntEn 00000004

Symbol: CPU_IntEn
   Definitions
      At line 56 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 22 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_IntEn used once
CPU_RevBits 0000001C

Symbol: CPU_RevBits
   Definitions
      At line 133 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 28 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_RevBits used once
CPU_SR_Restore 00000010

Symbol: CPU_SR_Restore
   Definitions
      At line 101 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 25 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_SR_Restore used once
CPU_SR_Save 00000008

Symbol: CPU_SR_Save
   Definitions
      At line 95 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 24 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_SR_Save used once
CPU_WaitForExcept 00000026

Symbol: CPU_WaitForExcept



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 164 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 31 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_WaitForExcept used once
CPU_WaitForInt 00000022

Symbol: CPU_WaitForInt
   Definitions
      At line 149 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
   Uses
      At line 30 in file ..\uC-CPU\ARM-Cortex-M3\MDK-ARM\cpu_a.asm
Comment: CPU_WaitForInt used once
9 symbols
344 symbols in table
